@{
    ViewBag.Title = "Home Page";
}

<br />
<hr />

<div id="calendar"></div>

<!-- This is to display information "on-click" when a user clicks on existing events -->

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="eventTitle"></span></h4>
            </div>
            <div class="modal-body">
                <p style="margin: 5px 5px 5px 5px" id="pDetails"></p>
                <div class="btn-toolbar" role="toolbar">
                    <button id="btnDelete" class="btn btn-default btn-block" style="background-color: dimgray; color: white;">
                        Delete <span class="glyphicon glyphicon-remove"></span>
                    </button>
                    <button id="btnEdit" class="btn btn-default btn-block">
                        Edit <span class="glyphicon glyphicon-pencil"></span>
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <div class="text-center">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- This what shows when a user clicks on "Edit" for existing memories, or clicks on a blank spot in the calendar -->

<div id="myModalSave" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Save Memory</h4>
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    <input type="hidden" id="hdnoteID" value="0" />

                    <div class="form-group">
                        <label>Date</label>
                        <div class="input-group date" id="dtp1">
                            <input type="text" id="txtStart" class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <textarea id="txtDescription" rows="3" class="form-control"></textarea>
                    </div>

                    <div class="form-group">
                        <label>Upload a photo</label>
                        <input type="file" id="fileUpload" accept="image/png, image/jpeg, image/jpg, image/bmp" />
                        <div id="previewImage"></div>
                    </div>

                    <button type="button" id="btnSave" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- The following few lines reference the stylesheets -->
<link href="~/Scripts/fullcalendar/fullcalendar.min.css" rel="stylesheet" />
<link href="~/Scripts/fullcalendar/fullcalendar.print.css" rel="stylesheet" media="print" />
<link href="~/Scripts/fullcalendar/bootstrap-datetimepicker.min.css" rel="stylesheet" />


@section Scripts{
    <!-- Reference the scripts -->
    <script src="~/Scripts/fullcalendar/moment.min.js"></script>
    <script src="~/Scripts/fullcalendar/fullcalendar.min.js"></script>
    <script type="text/javascript" src="~/Scripts/fullcalendar/bootstrap-datetimepicker.min.js"></script>

    <script>

        //This script pulls the memories from the JSONResult in C#
        //We use the StringDate instead of the regular Date since its format is
        //more human-friendly.

        $(document).ready(function () {
            var events = [];
            var selectedEvent = null;
            FetchMemoriesAndRenderCalendar();

            //Displays the memories and pushes data to individual events
            function FetchMemoriesAndRenderCalendar() {
                events = [];
                $.ajax({
                    type: "GET",
                    url: "/home/DisplayMemories",
                    success: function (data) {
                        $.each(data, function (i, v) {
                            events.push({
                                noteID: v.NoteID,
                                title: v.Text,
                                description: v.Text,
                                start: v.StringDate,
                                hasPhoto: v.HasPhoto,
                                photoLocation: v.PhotoLocationReference
                            });
                        })

                        GenerateCalendar(events);
                    },
                    error: function (error) {
                        alert('Failed to retrieve memories');
                    }
                })
            }

            //This actually makes the calendar and defines its parameters

            function GenerateCalendar(events) {
                $('#calendar').fullCalendar('destroy');
                $('#calendar').fullCalendar({
                    buttonText: {
                        prev: 'Previous', // <
                        next: 'Next' // >
                    },
                    contentHeight: 500,
                    defaultDate: new Date(),

                    //Don't display event time, since all memories are "all day events"
                    displayEventTime: false,

                    header: {
                        left: 'prev',
                        center: 'title',
                        right: 'next'
                    },
                    timeFormat: 'h(:mm)a',
                    eventLimit: true,
                    eventColor: '#378006',
                    events: events,

                    //Changes what happens when people click the calendar
                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;
                        selectedEvent.noteID = calEvent.noteID;
                        $('#myModal #eventTitle').text(calEvent.title);

                        //Append description, essentially, what we will see in the modal
                        var $description = $('<div/>');
                        $description.append($('<p/>').html('<b>Date: </b>' + calEvent.start.format("MM-DD-YYYY")));
                        $description.append($('<p/>').html('<b>Memory: </b>' + calEvent.description));
                        if (calEvent.hasPhoto == 1) {
                            //Right now, it displays the photo automatically. Would like to change to "on click" display
                            $description.append($('<p/>').html('<b>Photo Memory: </b>'));
                            $description.append($('<p/>').html('<img src="' + calEvent.photoLocation + '" height: auto width = "300" />'));

                            //Test code for button and img placeholder for on click display
                            //$description.append($('<p/>').html('<button id="btnViewMemoryImage" class="btn btn-default">View Image</button>'));
                            //$description.append($('<p/>').html('<img id="viewMemory" style="display:none;" height:auto width="300" src="viewMemory"/>'));
                        }

                        $('#myModal #pDetails').empty().html($description);

                        $('#myModal').modal();
                    },

                    selectable: true,

                    select: function (start, end) {
                        selectedEvent = {
                            noteID: 0,
                            hasPhoto: 0,
                            title: '',
                            description: '',
                            start: start
                        };
                        openAddEditForm();
                        $('#calendar').fullCalendar('unselect');
                    },

                    editable: true,

                    eventDrop: function (event) {
                        var data = {
                            NoteID: event.noteID,
                            HasPhoto: event.hasPhoto,
                            Note: event.title,
                            Date: event.start.format('MM/DD/YYYY'),
                            PhotoLocation: event.photoLocation
                        };
                        SaveEvent(data);
                    }
                })
            }

            //Functions and "on click" for the buttons


            //This is not used right now, please refine.
            //Problems include: Not displaying when added in description of modal
            //But displays when in the actual HTML portion
            //Additionally, the photo does not close out when users close the memory
            ////Users have to click "View image" to refresh it
            //$('#btnViewMemoryImage').click(function () {
            //    var sourceOfPicture = selectedEvent.photoLocation;
            //    var img = document.getElementById('viewMemory')
            //    img.src = sourceOfPicture;
            //    img.style.display = "block";
            //})

            //What happens when users click the "Edit" button
            $('#btnEdit').click(function () {
                //Open modal dialog for edit event
                openAddEditForm();
            })

            //What happens when users click the "Delete button"
            //Confirms user wants to delete the memory, retrieves the NoteID
            //Then calls DeleteMemory from Home Controller
            //If successful, hides the modal and rerenders calendar
            $('#btnDelete').click(function () {
                if (selectedEvent != null && confirm('Are you sure?')) {
                    $.ajax({
                        type: "POST",
                        url: '/home/DeleteMemory',
                        data: { 'NoteID': selectedEvent.noteID },
                        success: function (data) {
                            if (data.status) {
                                //Refresh the calendar and hide modal
                                $('#myModal').modal('hide');
                                FetchMemoriesAndRenderCalendar();
                            }
                        },
                        error: function () {
                            alert('Failed to delete memory');
                        }
                    })
                }
            })
            $('#dtp1,#dtp2').datetimepicker({
                format: 'MM/DD/YYYY'
            });

            //Function for when people click on existing memories
            //Loads information to display to the user
            function openAddEditForm() {
                if (selectedEvent != null) {
                    $('#hdnoteID').val(selectedEvent.noteID);
                    $('#txtDescription').val(selectedEvent.title);
                    $('#txtStart').val(selectedEvent.start.format('MM/DD/YYYY'));

                }
                $('#myModal').modal('hide');
                $('#myModalSave').modal();
            }

            //When there's a change event in #fileUpload (part of the modal to upload images,
            //triggers the preview image
            $("#fileUpload").on('change', function () {

                if (typeof (FileReader) != "undefined") {

                    //Calls the div right next to the #fileUpload input
                    var image_holder = $("#previewImage");
                    image_holder.empty();

                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $("<img />", {
                            "src": e.target.result,
                            "class": "img-fluid",
                            "width": "300",
                            "height": "auto"
                        }).appendTo(image_holder);

                    }
                    image_holder.show();
                    reader.readAsDataURL($(this)[0].files[0]);
                } else {
                    alert("This browser does not support FileReader.");
                }
            });

            //Clear FileReader when myModalSave closes
            $('#myModalSave').on('hidden.bs.modal', function () {
                //Sets the previewImage div HTML to nothing
                document.getElementById("previewImage").innerHTML = "";
                //Sets the fileUpload input value to nothing
                document.getElementById("fileUpload").value = "";
            });

            //What happens when a user clicks on btnSave
            //Validates entry and puts data into a var, formdata
            $('#btnSave').click(function () {

                //Get the files from the #fileUpload input button
                let fileUploader = $("#fileUpload").get(0);
                let files = fileUploader.files;

                //Validation/

                if ($('#txtDescription').val().trim() == "") {
                    alert('Text required');
                    return;
                }

                if ($('#txtStart').val().trim() == "") {
                    alert('Date required');
                    return;
                }

                //Make a new FormData and append the values

                var data = new FormData();
                data.append("NoteID", $('#hdnoteID').val());
                data.append("Date", $('#txtStart').val().trim());
                data.append("Note", $('#txtDescription').val().trim());

                //Append the files
                for (var x = 0; x < files.length; x++) {
                    data.append("file " + x, files[x]);
                }
                //Call function to submit data to the server
                SaveNote(data);
            })


            //Function that sends the data via a JsonRequest to the controller
            function SaveNote(data) {
                $.ajax({
                    type: "POST",
                    url: '/home/SaveMemory',
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (data) {
                        if (data.status) {
                            //Refresh the calendar and hide modal
                            $('#myModalSave').modal('hide');
                            FetchMemoriesAndRenderCalendar();
                        }
                    },
                    error: function () {
                        alert('Failed to save the memory');
                    }
                })

            }


        })
    </script>
}

@*<div class="row">
       @if (Request.IsAuthenticated)
       {
           <div class="col-md-4">
               <h2>Add a memory</h2>
               <p>We know you're busy. That's why we make it easy to add memories of your child's firsts.</p>
               <p>Whether it's the first time they rolled over or their first haircut, enter it here so you can look at it forever.</p>
               @Html.ActionLink("Make a new memory", "NewMemory", "Memory", null, new { @class = "nav-links" })
           </div>
       }
       else
       {
           <div class="col-md-4">
               <h2>Memories at a Glance</h2>
               <p>This application will allow you to enter memories of your child's "firsts".</p>
           </div>
       }
    </div>*@
